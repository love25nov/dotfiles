pgodeps() {
    go list -f '{{range .Imports}}
{{.}}
{{end}}' $1 | sort | uniq
}

grepcppincludes() {
    grep -rIh '#include ' $@ | sort -u
}

qreset() {
    tput reset
    tmux clear-history
}

nvm-init() {
    source /usr/share/nvm/init-nvm.sh
}

tag-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    if [ "$(echo $_version | head -c 1)" != "v" ]; then
        _version="v$_version"
    fi
    echo "Making an annotated git tag '$_version'"
    git tag $_version -am "$_version"
}

branch-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    if [ "$(echo $_version | head -c 1)" = "v" ]; then
        _version="${_version:1}"
    fi
    export _branch_name="release/$_version"
    echo "Making an git release branch '$_version'"
    git checkout -b "$_branch_name"
}

full-release() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    tag-release "$_version"
    git push --follow-tags
    branch-release "$_version"
    git push -u origin "$_branch_name"
}

full-release-npm() {
    local _version="$1"
    if [ -z "$_version" ]; then
        echo "Missing version. usage: $0 version (e.g. $0 v0.7.3)"
        return 1
    fi
    npm version "$_version"
    git push --follow-tags
    branch-release "$_version"
    git push -u origin "$_branch_name"
}

adddate() {
    while IFS= read -r line; do
        printf '%s %s\n' "$(date)" "$line"
    done
}

update-dotfiles() {
    ( cd "$HOME/git/dotfiles" && git pull )
}

download-bttv-emote() {
    _url="$1"
    if [ -z "$_url" ]; then
        >&2 echo "No URL passed to the function. Usage: $0 url (e.g. $0 https://cdn.betterttv.net/emote/5e5cef4cddc7a054d7f0ff22/3x)"
        exit 1
    fi
    if [ "$(echo $_url | tail -c 4)" = "/3x" ] || [ "$(echo $_url | tail -c 4)" = "/2x" ] || [ "$(echo $_url | tail -c 4)" = "/1x" ]; then
        _url="$(echo $_url | head -c -4)"
    fi
    _emote_id=$(echo "$_url" | rev | cut -d / -f 1 | rev)
    _emote_json=$(curl -s "https://api.betterttv.net/3/emotes/$_emote_id")
    _emote_code=$(echo "$_emote_json" | jq -r '.code')
    mkdir -p "$_emote_code"
    echo "Downloading all sizes of the emote $_emote_code (id '$_emote_id')"
    wget --quiet "$_url/1x" --output-document="$_emote_code"/"$_emote_code"-1x.png
    wget --quiet "$_url/2x" --output-document="$_emote_code"/"$_emote_code"-2x.png
    wget --quiet "$_url/3x" --output-document="$_emote_code"/"$_emote_code"-3x.png
}

scrot-qr() {
    _path=$(mktemp -u /tmp/scrot-qr-XXXXXX)
    scrot "$_path" -o -s -e "zbarimg $_path" && rm "$_path"
}

scrot-clipboard() {
    _path=$(mktemp -u /tmp/scrot-clipboard-XXXXXX.png)

    >&2 echo "Select portion to screenshot"

    scrot -s "$_path" || return

    xclip -selection clipboard -target image/png "$_path" || return

    >&2 echo "Saved to clipboard"
}
